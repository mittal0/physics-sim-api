version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: physics_sim
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for Celery broker and result backend
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # FastAPI Web Service
  web:
    build:
      context: .
      target: base
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/physics_sim
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DEBUG=true
      - ARTIFACTS_PATH=/app/artifacts
    volumes:
      - ./artifacts:/app/artifacts
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker
      - .:/app  # Development volume mount
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  worker:
    build:
      context: .
      target: worker
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/physics_sim
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ARTIFACTS_PATH=/app/artifacts
    volumes:
      - ./artifacts:/app/artifacts
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker
      - .:/app  # Development volume mount
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2

  # Celery Flower (Web UI for monitoring)
  flower:
    build:
      context: .
      target: base
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    command: ["celery", "-A", "app.tasks.celery_app", "flower", "--port=5555"]

  # Build simulation image
  sim-builder:
    build:
      context: ./sim
      dockerfile: Dockerfile
    image: sim:local
    profiles:
      - build
    command: ["echo", "Simulation image built"]

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: physics-sim-network