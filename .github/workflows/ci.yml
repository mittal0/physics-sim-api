name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run black check
      run: black --check .
    
    - name: Run isort check
      run: isort --check-only .
    
    - name: Run flake8
      run: flake8 app sim tests
    
    - name: Run mypy
      run: mypy app

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: physics_sim_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Set up test environment
      run: |
        mkdir -p artifacts
        cp .env.example .env
    
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/physics_sim_test
        REDIS_URL: redis://localhost:6379/0
        CELERY_BROKER_URL: redis://localhost:6379/0
        CELERY_RESULT_BACKEND: redis://localhost:6379/0
      run: |
        pytest tests/unit/ -v --tb=short
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/physics_sim_test
        REDIS_URL: redis://localhost:6379/0
        CELERY_BROKER_URL: redis://localhost:6379/0
        CELERY_RESULT_BACKEND: redis://localhost:6379/0
      run: |
        pytest tests/integration/ -v --tb=short
    
    - name: Generate coverage report
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/physics_sim_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        pip install coverage
        coverage run -m pytest tests/
        coverage report
        coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build API service image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: base
        push: false
        tags: physics-sim-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build simulation image
      uses: docker/build-push-action@v5
      with:
        context: ./sim
        push: false
        tags: sim:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test simulation image
      run: |
        docker run --rm sim:test python run_sim.py --time_steps 5 --spatial_steps 10 --end_time 0.01

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -e .
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        if [ -f safety-report.json ]; then
          cat safety-report.json
        fi
    
    - name: Run bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          cat bandit-report.json
        fi

  simulation-test:
    name: Simulation Verification
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install simulation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r sim/requirements.txt
    
    - name: Test simulation script
      run: |
        cd sim
        python run_sim.py --length 1.0 --time_steps 20 --spatial_steps 30 --end_time 0.1 --output_dir test_output
        
        # Verify output files were created
        ls -la test_output/
        test -f test_output/meta.json
        test -f test_output/result.csv
        test -f test_output/simulation_results.png
        
        # Verify CSV content
        wc -l test_output/result.csv
        head -5 test_output/result.csv